JAVASCRIPT MODERNO

- ECMAScript é o nome formal
- Transpiladores convertem as versões mais modernas nas mais antigas (TypeScript/Babel), frameworks já fazem

- VAR: declara variáveis com escopo amplo (pode ser criado dentro de uma função e ser acessado de fora)
- LET: escopo reduzido (fica disponível apenas dentro do escopo, como num for/function)
- CONST: não é possível atribuir um outro valor depois (não se aplica a vetores/objetos)/dar preferência

- TEMPLATE LITERALS: forma de escrever strings, conteúdo entre `crases` e variáveis dentro de ${}

- ARROW FUNCTIONS: forma reduzida e elegante, let nomeDaFunção = (parametros) => a + b; 
- caso a função tenha mais de uma operação, usa-se as {}
- bom para quando vai usar apenas uma vez

- DEFAULT PARAMETERS: coloca um valor padrão caso o parâmetro não seja preenchido, let function = (a, b = 10) => a + b;
- pode colocar no b ou no a e b, mas nao apenas no a

- MÉTODOS DE ARRAYS: map, filter, reduce, forEach, find, some, every, sort

- SPREAD: espalha os elementos de um array dentro de outro com o uso de ... no começo do array a ser espalhado
- let array1 = [1,2,3] let array2 = [...array1]

- REST: ao invés de espalhar, ele agrupa elementos em um array, usado para funções com numero infinito de parâmetros
- const superSum = (...numbers) => numbers.reduce((acc, curr) => acc + curr, 0);
- faz com que sejam passados quantos números quiser, sem limite definido e coloca eles em um array que pode ser acessado na função

- DESTRUCT: maneira de declarar variáveis a partir de um array
- const {username, password} = array;
- ele pega os valores do array cuja chave é a mesma do nome da var que se está criando